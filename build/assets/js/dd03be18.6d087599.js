"use strict";(self.webpackChunknote_likun_cc=self.webpackChunknote_likun_cc||[]).push([[2980],{9114:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>a});var r=t(4848),s=t(8453);const o={sidebar_position:4},u="Rust \u4f8b\u5b50",i={id:"rust/project",title:"Rust \u4f8b\u5b50",description:"\u5347\u7ea7\u4f9d\u8d56",source:"@site/docs/rust/04.project.md",sourceDirName:"rust",slug:"/rust/project",permalink:"/docs/rust/project",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rust/04.project.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Rust Hello World",permalink:"/docs/rust/helloworld"},next:{title:"Rust \u6570\u636e\u7c7b\u578b",permalink:"/docs/rust/types"}},c={},a=[{value:"\u5347\u7ea7\u4f9d\u8d56",id:"\u5347\u7ea7\u4f9d\u8d56",level:2},{value:"\u731c\u6570\u5b57\u4f8b\u5b50",id:"\u731c\u6570\u5b57\u4f8b\u5b50",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"rust-\u4f8b\u5b50",children:"Rust \u4f8b\u5b50"}),"\n",(0,r.jsx)(n.h2,{id:"\u5347\u7ea7\u4f9d\u8d56",children:"\u5347\u7ea7\u4f9d\u8d56"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"cargo update\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u731c\u6570\u5b57\u4f8b\u5b50",children:"\u731c\u6570\u5b57\u4f8b\u5b50"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use std::io;                                                                                                \nuse std::cmp::Ordering;                                                                                     \nuse rand::Rng;                                                                                              \n                                                                                                            \nfn main() {                                                                                                 \n    println!("Guess the numbers!");                                                                         \n                                                                                                            \n    let secret_number = rand::thread_rng().gen_range(1, 101);                                               \n                                                                                                            \n    //println!("The secret number is: {}", secret_number);                                                  \n                                                                                                            \n    loop {                                                                                                  \n        println!("Please input your guess.");                                                               \n        let mut guess = String::new();                                                                      \n                                                                                                            \n        io::stdin().read_line(&mut guess)                                                                   \n            .expect("Failed to read line");                                                                 \n                                                                                                            \n        let guess: u32 = match guess.trim().parse() {                                                       \n            Ok(num) => num,                                                                                 \n            Err(_) => continue,                                                                             \n        };                                                                                                  \n                                                                                                            \n        println!("You guessed: {}", guess);                                                                 \n                                                                                                            \n        match guess.cmp(&secret_number) {                                                                   \n            Ordering::Less => println!("Too small!"),                                                       \n            Ordering::Greater => println!("Too big!"),                                                      \n            Ordering::Equal => {                                                                            \n                println!("You win!");                                                                       \n                break;                                                                                      \n            }                                                                                               \n        }                                                                                                   \n    }                                                                                                       \n}                                                                                                           \n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>u,x:()=>i});var r=t(6540);const s={},o=r.createContext(s);function u(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:u(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);